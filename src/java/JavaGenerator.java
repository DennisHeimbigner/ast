/*
 * Copyright (c) 1998 - 2010. University Corporation for Atmospheric Research/Unidata
 * Portions of this software were developed by the Unidata Program at the
 * University Corporation for Atmospheric Research.
 *
 * Access and use of this software shall impose the following obligations
 * and understandings on the user. The user is granted the right, without
 * any fee or cost, to use, copy, modify, alter, enhance and distribute
 * this software, and any derivative works thereof, and its supporting
 * documentation for any purpose whatsoever, provided that this entire
 * notice appears in all copies of the software, derivative works and
 * supporting documentation.  Further, UCAR requests that the user credit
 * UCAR/Unidata in any publications that result from the use of this
 * software or in any product that includes this software. The names UCAR
 * and/or Unidata, however, may not be used in any advertising or publicity
 * to endorse or promote any products or commercial entity unless specific
 * written permission is obtained from UCAR/Unidata. The user also
 * understands that UCAR/Unidata is not obligated to provide the user with
 * any support, consulting, training or assistance of any kind with regard
 * to the use, operation and performance of this software nor to provide
 * the user with any updates, revisions, new versions or "bug fixes."
 *
 * THIS SOFTWARE IS PROVIDED BY UCAR/UNIDATA "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL UCAR/UNIDATA BE LIABLE FOR ANY SPECIAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
 * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
 * WITH THE ACCESS, USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
The code generated by protoc for java is a bit odd.
In order to generate only a single output file,
protoc forces the existence of a single outer class
into which everything else in the .proto file is defined.
The name of the single outer class is taken either from the
option "java_outer_classname" or from the name of the file
with all non-alphnumeric characters deleted and
the remainer converted to upper case.
(i.e. t_x.proto is used to make class TX).

This code is intended to be non-interpretive,
so it must produce an output file for each
package decl=> using the import file name
and assuming that each file contains as most
one package decl.
*/

package unidata.protobuf.compiler;

import gnu.getopt.Getopt;

import java.util.*;
import java.io.*;

public class JavaGenerator implements Generator
{
    //////////////////////////////////////////////////

    static final String DFALTDIR = ".";

    //////////////////////////////////////////////////
    // Define the per-node extra info; grouped here into a single class.

    static public class Annotation
    {
	String packagename = null;
	String outerclass = null; // also used as file name
	String refpath = null;
    }

    //////////////////////////////////////////////////
    // Instance variables

    String outputdir = DFALTDIR;

    //////////////////////////////////////////////////
    // Constructor

    public JavaGenerator()
    {
    }	 

    //////////////////////////////////////////////////
    // Command line processing

    List<String>
    processcommandline(String[] argv)
    {
	int c;
	List<String> arglist = new ArrayList<String>();
	Getopt g = new Getopt("JavaGenerator",argv,"-:o",null);
	while ((c = g.getopt()) != -1) {
	    switch (c) {
	    case 1: // intermixed non-option
		arglist.add(g.getOptarg());
		break;		
	    case ':':
		System.err.println("Command line option requires argument "+g.getOptopt());
		System.exit(1);
	    case '?':
		System.err.println("Illegal cmd line option: "+g.getOptopt());
		System.exit(1);
	    // True options start here
	    case 'o':
		String dir = g.getOptarg();
		if(dir != null && dir.length() > 0) outputdir = dir;
		break;	
	    default:
		System.err.println("Unexpected getopt tag: "+c);
		System.exit(1);
	    }
	}
    }
    //////////////////////////////////////////////////

/*
- compute the Java package names for all the packages
- compute the filenames for each package
- compute the reference path for each message and enum
- for each enum in package p
   - generate the top level enum definitions
   - generate the top level message classes
     - for each message, generate the ED functions
*/

    public boolean generate(String[] argv, AST root) throws Exception
    {
	List<String> arglist = processcommandline();

	// Assign annotation objects 
	for(AST ast: root.getNodeSet()) {
	    switch (ast.getSort()) {
	    case PACKAGE: MESSAGE: case ENUM:
		Annotation a = new Annotation();
		ast.setAnnotation(a);
		break;
	    default: break;
	    }
	}

	// Compute the Java package names for all the packages
	for(AST.Package p: root.getPackageSet()) {
	    Annotation a = p.getAnnotation();
	    a.packagename = p.optionLookup("java_package");
	    if(a.packagename == null) a.packagename = p.getName();
	}

	// compute the outer class / filename for all the packages
	// Truncate each such filename
	for(AST p0: root.getPackageSet()) {
	    String base = computeouterclassname(p0);
	    // Make sure name is unique
	    int counter = 1;
	    String outerclass = base;
	    for(boolean ok=false;ok;) {
		ok = true;
		for(AST p1: root.getPackageSet()) {
		    Annotation a = (Annotation)p1.getAnnotation();
		    if(outerclass.equals(a.outerclass)) {
			outerclass = base + counter++;
		        ok = false;
		    }
		}
	    }
	    Annotation a = (Annotation)p0.getAnnotation();
	    a.outerclass = outerclass;
	    // Now, truncate
	    FileWriter filewriter = null;
	    String filename = outputdir + "/" + a.outerclass+".java";
	    try {
		filewriter = new FileWriter(filename);
	    } catch (Exception e) {
		System.err.println("Cannot access file: "+filename);
		return false;
	    }
	    try {filewriter.close();} catch (Exception e) {};
	}

	// Compute the java reference path for each message and enum
        List<AST> path = new ArrayList<AST>();
	for(AST ast: root.getNodeSet()) {
	    Annotation a = ast.getAnnotation();
	    switch (ast.getSort()) {
	    case MESSAGE: CASE ENUM:
		collectpath(ast,path,false)
		a.refpath = computejavapath(path);
		break;
	    default: break;
	    }
	}

	// Generate each package's content
	for(AST.Package p0: root.getPackageSet()) {
	    Annotation a = p0.getAnnotation();
	    Printer pw = null;
	    generate_header(p0,pw)
	    // Open the .java file for this package
   	    String filename = outputdir + "/" + a.outerclass+".java";
  	    try {
		pw = new printer(filename);
		generate_header(po,a.printer);
		generate_content(po,a.printer);
		generate_trailer(po,a.printer);
		pw.close();
	    } catch (Exception e) {
		System.err.println("Generation Failure: "+filename+":"+e);
		return false;
	    }
	}

	return true;
    } // generate()

    void generate_header(AST.Package p, Printer printer) throws Exception
    {
	Annotation a = p.getAnnotation();
	Printer.println("package " + p.packagename() + ";")
	Printer.println("");
	
        // Open the outerclass
	Printer.println("public class "+a.outerclass);
	Printer.println("{");
    }

    void generate_trailer(AST.Package p, Printer printer) throws Exception
    {
	Annotation a = p.getAnnotation();
	// Close the outer class
	Printer.println("} //"+a.outerclass);
    }

    void generate_content(AST.Package p, Printer printer) throws Exception
    {
	// Generate the enum definitions
	for(AST ast: p.getChildSet()) {
	    if(ast.getSort() != AST.Sort.ENUM) continue;
	    generate_enum((AST.Enum)ast,pw);
	}

	// Generate the message definitions (including recursive contents)
	for(AST ast: p.getChildSet()) {
	    if(ast.getSort() != AST.Sort.MESSAGE) continue;
	    generate_message((AST.Message)ast,pw);
	}
    }


    void generate_enum(AST.Enum node, Printer printer) throws Exception
    {
	// Generate the top level enum definitions
	for(AST ast: root.getNodeSet()) {
	    if(ast.getParent().getSort() != AST.Sort.Package) continue;
	    Annotation a = msg.getAnnotation();
	    switch (ast.getSort()) {
	    case ENUM:
	    default: break;
	    }
	}
    }


    void generate_message(AST.Message node, Printer printer) throws Exception
    {
	// Generate the top level message definitions
	// including any nested enums or messages
	for(AST ast: root.getNodeSet()) {
	    if(ast.getParent().getSort() != AST.Sort.Package) continue;
	    Annotation a = msg.getAnnotation();
	    switch (ast.getSort()) {
	    case MESSAGE:
		// Open the .java file for this message
		AST.Message e = (AST.Message)ast;
		String filename = outputdir + "/" + a.outerclass+".java";
		try {
		    a.printer = new Printer(filename);
		    if(!generate_message(e,a.printer)) return false;
		} catch (Exception e) {
		    System.err.println("IO Failure: "+filename+":"+e);
		    return false;
		}
	    default: break;
	    }
	}
    }


    String
    computeouterclassname(AST.Package p)
    {
        AST.File file = p.getPackageFile();
        String filename = file.getName();
        String outername = "";
        for(int i=0;i<filename.length();i++) {
            char c = filename.charAt(i).toUpperCase();
            if("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789".indexOf(char) >= 0)
                outername += c;
        }
        return outername
    }

    // Collect path of parent nodes upto
    // and (optionally) including the package
    void
    collectpath(AST ast, List<AST> path, boolean thrupackage)
    {
        path.clear();
        AST parent = ast;
        while(parent.getSort() != AST.Sort.ROOT) {
            if(parent.getSort() == AST.Sort.PACKAGE && !thrupackage) break;
            path.add(0,parent);
            parent = parent.getParent();
        }
    }

    String
    computejavapath(List<AST> path, String outerclass)
    {
        String spath = outerclass;
        for(int i=0;i<path.size();i++) {
            AST ast = path.get(i);
            spath = spath + "." + ast.getName();
        }
        return spath;
    }

} // JavaGenerator


